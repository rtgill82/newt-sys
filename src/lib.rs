/* generated by rust-bindgen 0.71.1 */
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

mod colorset_custom;
pub use self::colorset_custom::NEWT_COLORSET_CUSTOM;

pub const __GNUC_VA_LIST: u32 = 1;
pub const NEWT_COLORSET_ROOT: ::std::os::raw::c_int = 2;
pub const NEWT_COLORSET_BORDER: ::std::os::raw::c_int = 3;
pub const NEWT_COLORSET_WINDOW: ::std::os::raw::c_int = 4;
pub const NEWT_COLORSET_SHADOW: ::std::os::raw::c_int = 5;
pub const NEWT_COLORSET_TITLE: ::std::os::raw::c_int = 6;
pub const NEWT_COLORSET_BUTTON: ::std::os::raw::c_int = 7;
pub const NEWT_COLORSET_ACTBUTTON: ::std::os::raw::c_int = 8;
pub const NEWT_COLORSET_CHECKBOX: ::std::os::raw::c_int = 9;
pub const NEWT_COLORSET_ACTCHECKBOX: ::std::os::raw::c_int = 10;
pub const NEWT_COLORSET_ENTRY: ::std::os::raw::c_int = 11;
pub const NEWT_COLORSET_LABEL: ::std::os::raw::c_int = 12;
pub const NEWT_COLORSET_LISTBOX: ::std::os::raw::c_int = 13;
pub const NEWT_COLORSET_ACTLISTBOX: ::std::os::raw::c_int = 14;
pub const NEWT_COLORSET_TEXTBOX: ::std::os::raw::c_int = 15;
pub const NEWT_COLORSET_ACTTEXTBOX: ::std::os::raw::c_int = 16;
pub const NEWT_COLORSET_HELPLINE: ::std::os::raw::c_int = 17;
pub const NEWT_COLORSET_ROOTTEXT: ::std::os::raw::c_int = 18;
pub const NEWT_COLORSET_EMPTYSCALE: ::std::os::raw::c_int = 19;
pub const NEWT_COLORSET_FULLSCALE: ::std::os::raw::c_int = 20;
pub const NEWT_COLORSET_DISENTRY: ::std::os::raw::c_int = 21;
pub const NEWT_COLORSET_COMPACTBUTTON: ::std::os::raw::c_int = 22;
pub const NEWT_COLORSET_ACTSELLISTBOX: ::std::os::raw::c_int = 23;
pub const NEWT_COLORSET_SELLISTBOX: ::std::os::raw::c_int = 24;
pub const NEWT_ARG_LAST: ::std::os::raw::c_int = -100000;
pub const NEWT_ARG_APPEND: ::std::os::raw::c_int = -1;
pub const NEWT_FLAG_RETURNEXIT: ::std::os::raw::c_int = 1;
pub const NEWT_FLAG_HIDDEN: ::std::os::raw::c_int = 2;
pub const NEWT_FLAG_SCROLL: ::std::os::raw::c_int = 4;
pub const NEWT_FLAG_DISABLED: ::std::os::raw::c_int = 8;
pub const NEWT_FLAG_BORDER: ::std::os::raw::c_int = 32;
pub const NEWT_FLAG_WRAP: ::std::os::raw::c_int = 64;
pub const NEWT_FLAG_NOF12: ::std::os::raw::c_int = 128;
pub const NEWT_FLAG_MULTIPLE: ::std::os::raw::c_int = 256;
pub const NEWT_FLAG_SELECTED: ::std::os::raw::c_int = 512;
pub const NEWT_FLAG_CHECKBOX: ::std::os::raw::c_int = 1024;
pub const NEWT_FLAG_PASSWORD: ::std::os::raw::c_int = 2048;
pub const NEWT_FLAG_SHOWCURSOR: ::std::os::raw::c_int = 4096;
pub const NEWT_FD_READ: ::std::os::raw::c_int = 1;
pub const NEWT_FD_WRITE: ::std::os::raw::c_int = 2;
pub const NEWT_FD_EXCEPT: ::std::os::raw::c_int = 4;
pub const NEWT_CHECKBOXTREE_UNSELECTABLE: ::std::os::raw::c_int = 4096;
pub const NEWT_CHECKBOXTREE_HIDE_BOX: ::std::os::raw::c_int = 8192;
pub const NEWT_CHECKBOXTREE_COLLAPSED: ::std::os::raw::c_char = 0;
pub const NEWT_CHECKBOXTREE_EXPANDED: ::std::os::raw::c_char = 1;
pub const NEWT_CHECKBOXTREE_UNSELECTED: ::std::os::raw::c_char = 32;
pub const NEWT_CHECKBOXTREE_SELECTED: ::std::os::raw::c_char = 42;
pub const NEWT_LISTBOX_RETURNEXIT: ::std::os::raw::c_int = 1;
pub const NEWT_ENTRY_SCROLL: ::std::os::raw::c_int = 4;
pub const NEWT_ENTRY_HIDDEN: ::std::os::raw::c_int = 2;
pub const NEWT_ENTRY_RETURNEXIT: ::std::os::raw::c_int = 1;
pub const NEWT_ENTRY_DISABLED: ::std::os::raw::c_int = 8;
pub const NEWT_TEXTBOX_WRAP: ::std::os::raw::c_int = 64;
pub const NEWT_TEXTBOX_SCROLL: ::std::os::raw::c_int = 4;
pub const NEWT_FORM_NOF12: ::std::os::raw::c_int = 128;
pub const NEWT_KEY_TAB: ::std::os::raw::c_int = 9;
pub const NEWT_KEY_ENTER: ::std::os::raw::c_int = 13;
pub const NEWT_KEY_SUSPEND: ::std::os::raw::c_int = 26;
pub const NEWT_KEY_ESCAPE: ::std::os::raw::c_int = 27;
pub const NEWT_KEY_RETURN: ::std::os::raw::c_int = 13;
pub const NEWT_KEY_EXTRA_BASE: ::std::os::raw::c_int = 32768;
pub const NEWT_KEY_UP: ::std::os::raw::c_int = 32769;
pub const NEWT_KEY_DOWN: ::std::os::raw::c_int = 32770;
pub const NEWT_KEY_LEFT: ::std::os::raw::c_int = 32772;
pub const NEWT_KEY_RIGHT: ::std::os::raw::c_int = 32773;
pub const NEWT_KEY_BKSPC: ::std::os::raw::c_int = 32774;
pub const NEWT_KEY_DELETE: ::std::os::raw::c_int = 32775;
pub const NEWT_KEY_HOME: ::std::os::raw::c_int = 32776;
pub const NEWT_KEY_END: ::std::os::raw::c_int = 32777;
pub const NEWT_KEY_UNTAB: ::std::os::raw::c_int = 32778;
pub const NEWT_KEY_PGUP: ::std::os::raw::c_int = 32779;
pub const NEWT_KEY_PGDN: ::std::os::raw::c_int = 32780;
pub const NEWT_KEY_INSERT: ::std::os::raw::c_int = 32781;
pub const NEWT_KEY_F1: ::std::os::raw::c_int = 32869;
pub const NEWT_KEY_F2: ::std::os::raw::c_int = 32870;
pub const NEWT_KEY_F3: ::std::os::raw::c_int = 32871;
pub const NEWT_KEY_F4: ::std::os::raw::c_int = 32872;
pub const NEWT_KEY_F5: ::std::os::raw::c_int = 32873;
pub const NEWT_KEY_F6: ::std::os::raw::c_int = 32874;
pub const NEWT_KEY_F7: ::std::os::raw::c_int = 32875;
pub const NEWT_KEY_F8: ::std::os::raw::c_int = 32876;
pub const NEWT_KEY_F9: ::std::os::raw::c_int = 32877;
pub const NEWT_KEY_F10: ::std::os::raw::c_int = 32878;
pub const NEWT_KEY_F11: ::std::os::raw::c_int = 32879;
pub const NEWT_KEY_F12: ::std::os::raw::c_int = 32880;
pub const NEWT_KEY_RESIZE: ::std::os::raw::c_int = 32881;
pub const NEWT_KEY_ERROR: ::std::os::raw::c_int = 32882;
pub const NEWT_ANCHOR_LEFT: ::std::os::raw::c_int = 1;
pub const NEWT_ANCHOR_RIGHT: ::std::os::raw::c_int = 2;
pub const NEWT_ANCHOR_TOP: ::std::os::raw::c_int = 4;
pub const NEWT_ANCHOR_BOTTOM: ::std::os::raw::c_int = 8;
pub const NEWT_GRID_FLAG_GROWX: ::std::os::raw::c_int = 1;
pub const NEWT_GRID_FLAG_GROWY: ::std::os::raw::c_int = 2;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtColors {
    pub rootFg: *mut ::std::os::raw::c_char,
    pub rootBg: *mut ::std::os::raw::c_char,
    pub borderFg: *mut ::std::os::raw::c_char,
    pub borderBg: *mut ::std::os::raw::c_char,
    pub windowFg: *mut ::std::os::raw::c_char,
    pub windowBg: *mut ::std::os::raw::c_char,
    pub shadowFg: *mut ::std::os::raw::c_char,
    pub shadowBg: *mut ::std::os::raw::c_char,
    pub titleFg: *mut ::std::os::raw::c_char,
    pub titleBg: *mut ::std::os::raw::c_char,
    pub buttonFg: *mut ::std::os::raw::c_char,
    pub buttonBg: *mut ::std::os::raw::c_char,
    pub actButtonFg: *mut ::std::os::raw::c_char,
    pub actButtonBg: *mut ::std::os::raw::c_char,
    pub checkboxFg: *mut ::std::os::raw::c_char,
    pub checkboxBg: *mut ::std::os::raw::c_char,
    pub actCheckboxFg: *mut ::std::os::raw::c_char,
    pub actCheckboxBg: *mut ::std::os::raw::c_char,
    pub entryFg: *mut ::std::os::raw::c_char,
    pub entryBg: *mut ::std::os::raw::c_char,
    pub labelFg: *mut ::std::os::raw::c_char,
    pub labelBg: *mut ::std::os::raw::c_char,
    pub listboxFg: *mut ::std::os::raw::c_char,
    pub listboxBg: *mut ::std::os::raw::c_char,
    pub actListboxFg: *mut ::std::os::raw::c_char,
    pub actListboxBg: *mut ::std::os::raw::c_char,
    pub textboxFg: *mut ::std::os::raw::c_char,
    pub textboxBg: *mut ::std::os::raw::c_char,
    pub actTextboxFg: *mut ::std::os::raw::c_char,
    pub actTextboxBg: *mut ::std::os::raw::c_char,
    pub helpLineFg: *mut ::std::os::raw::c_char,
    pub helpLineBg: *mut ::std::os::raw::c_char,
    pub rootTextFg: *mut ::std::os::raw::c_char,
    pub rootTextBg: *mut ::std::os::raw::c_char,
    pub emptyScale: *mut ::std::os::raw::c_char,
    pub fullScale: *mut ::std::os::raw::c_char,
    pub disabledEntryFg: *mut ::std::os::raw::c_char,
    pub disabledEntryBg: *mut ::std::os::raw::c_char,
    pub compactButtonFg: *mut ::std::os::raw::c_char,
    pub compactButtonBg: *mut ::std::os::raw::c_char,
    pub actSelListboxFg: *mut ::std::os::raw::c_char,
    pub actSelListboxBg: *mut ::std::os::raw::c_char,
    pub selListboxFg: *mut ::std::os::raw::c_char,
    pub selListboxBg: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "arm", target_arch = "riscv32", target_arch = "x86"))]
const _: () = {
    ["Size of newtColors"][::std::mem::size_of::<newtColors>() - 176usize];
    ["Alignment of newtColors"][::std::mem::align_of::<newtColors>() - 4usize];
    ["Offset of field: newtColors::rootFg"][::std::mem::offset_of!(newtColors, rootFg) - 0usize];
    ["Offset of field: newtColors::rootBg"][::std::mem::offset_of!(newtColors, rootBg) - 4usize];
    ["Offset of field: newtColors::borderFg"]
        [::std::mem::offset_of!(newtColors, borderFg) - 8usize];
    ["Offset of field: newtColors::borderBg"]
        [::std::mem::offset_of!(newtColors, borderBg) - 12usize];
    ["Offset of field: newtColors::windowFg"]
        [::std::mem::offset_of!(newtColors, windowFg) - 16usize];
    ["Offset of field: newtColors::windowBg"]
        [::std::mem::offset_of!(newtColors, windowBg) - 20usize];
    ["Offset of field: newtColors::shadowFg"]
        [::std::mem::offset_of!(newtColors, shadowFg) - 24usize];
    ["Offset of field: newtColors::shadowBg"]
        [::std::mem::offset_of!(newtColors, shadowBg) - 28usize];
    ["Offset of field: newtColors::titleFg"][::std::mem::offset_of!(newtColors, titleFg) - 32usize];
    ["Offset of field: newtColors::titleBg"][::std::mem::offset_of!(newtColors, titleBg) - 36usize];
    ["Offset of field: newtColors::buttonFg"]
        [::std::mem::offset_of!(newtColors, buttonFg) - 40usize];
    ["Offset of field: newtColors::buttonBg"]
        [::std::mem::offset_of!(newtColors, buttonBg) - 44usize];
    ["Offset of field: newtColors::actButtonFg"]
        [::std::mem::offset_of!(newtColors, actButtonFg) - 48usize];
    ["Offset of field: newtColors::actButtonBg"]
        [::std::mem::offset_of!(newtColors, actButtonBg) - 52usize];
    ["Offset of field: newtColors::checkboxFg"]
        [::std::mem::offset_of!(newtColors, checkboxFg) - 56usize];
    ["Offset of field: newtColors::checkboxBg"]
        [::std::mem::offset_of!(newtColors, checkboxBg) - 60usize];
    ["Offset of field: newtColors::actCheckboxFg"]
        [::std::mem::offset_of!(newtColors, actCheckboxFg) - 64usize];
    ["Offset of field: newtColors::actCheckboxBg"]
        [::std::mem::offset_of!(newtColors, actCheckboxBg) - 68usize];
    ["Offset of field: newtColors::entryFg"][::std::mem::offset_of!(newtColors, entryFg) - 72usize];
    ["Offset of field: newtColors::entryBg"][::std::mem::offset_of!(newtColors, entryBg) - 76usize];
    ["Offset of field: newtColors::labelFg"][::std::mem::offset_of!(newtColors, labelFg) - 80usize];
    ["Offset of field: newtColors::labelBg"][::std::mem::offset_of!(newtColors, labelBg) - 84usize];
    ["Offset of field: newtColors::listboxFg"]
        [::std::mem::offset_of!(newtColors, listboxFg) - 88usize];
    ["Offset of field: newtColors::listboxBg"]
        [::std::mem::offset_of!(newtColors, listboxBg) - 92usize];
    ["Offset of field: newtColors::actListboxFg"]
        [::std::mem::offset_of!(newtColors, actListboxFg) - 96usize];
    ["Offset of field: newtColors::actListboxBg"]
        [::std::mem::offset_of!(newtColors, actListboxBg) - 100usize];
    ["Offset of field: newtColors::textboxFg"]
        [::std::mem::offset_of!(newtColors, textboxFg) - 104usize];
    ["Offset of field: newtColors::textboxBg"]
        [::std::mem::offset_of!(newtColors, textboxBg) - 108usize];
    ["Offset of field: newtColors::actTextboxFg"]
        [::std::mem::offset_of!(newtColors, actTextboxFg) - 112usize];
    ["Offset of field: newtColors::actTextboxBg"]
        [::std::mem::offset_of!(newtColors, actTextboxBg) - 116usize];
    ["Offset of field: newtColors::helpLineFg"]
        [::std::mem::offset_of!(newtColors, helpLineFg) - 120usize];
    ["Offset of field: newtColors::helpLineBg"]
        [::std::mem::offset_of!(newtColors, helpLineBg) - 124usize];
    ["Offset of field: newtColors::rootTextFg"]
        [::std::mem::offset_of!(newtColors, rootTextFg) - 128usize];
    ["Offset of field: newtColors::rootTextBg"]
        [::std::mem::offset_of!(newtColors, rootTextBg) - 132usize];
    ["Offset of field: newtColors::emptyScale"]
        [::std::mem::offset_of!(newtColors, emptyScale) - 136usize];
    ["Offset of field: newtColors::fullScale"]
        [::std::mem::offset_of!(newtColors, fullScale) - 140usize];
    ["Offset of field: newtColors::disabledEntryFg"]
        [::std::mem::offset_of!(newtColors, disabledEntryFg) - 144usize];
    ["Offset of field: newtColors::disabledEntryBg"]
        [::std::mem::offset_of!(newtColors, disabledEntryBg) - 148usize];
    ["Offset of field: newtColors::compactButtonFg"]
        [::std::mem::offset_of!(newtColors, compactButtonFg) - 152usize];
    ["Offset of field: newtColors::compactButtonBg"]
        [::std::mem::offset_of!(newtColors, compactButtonBg) - 156usize];
    ["Offset of field: newtColors::actSelListboxFg"]
        [::std::mem::offset_of!(newtColors, actSelListboxFg) - 160usize];
    ["Offset of field: newtColors::actSelListboxBg"]
        [::std::mem::offset_of!(newtColors, actSelListboxBg) - 164usize];
    ["Offset of field: newtColors::selListboxFg"]
        [::std::mem::offset_of!(newtColors, selListboxFg) - 168usize];
    ["Offset of field: newtColors::selListboxBg"]
        [::std::mem::offset_of!(newtColors, selListboxBg) - 172usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "aarch64", target_arch = "riscv64", target_arch = "x86_64"))]
const _: () = {
    ["Size of newtColors"][::std::mem::size_of::<newtColors>() - 352usize];
    ["Alignment of newtColors"][::std::mem::align_of::<newtColors>() - 8usize];
    ["Offset of field: newtColors::rootFg"][::std::mem::offset_of!(newtColors, rootFg) - 0usize];
    ["Offset of field: newtColors::rootBg"][::std::mem::offset_of!(newtColors, rootBg) - 8usize];
    ["Offset of field: newtColors::borderFg"]
        [::std::mem::offset_of!(newtColors, borderFg) - 16usize];
    ["Offset of field: newtColors::borderBg"]
        [::std::mem::offset_of!(newtColors, borderBg) - 24usize];
    ["Offset of field: newtColors::windowFg"]
        [::std::mem::offset_of!(newtColors, windowFg) - 32usize];
    ["Offset of field: newtColors::windowBg"]
        [::std::mem::offset_of!(newtColors, windowBg) - 40usize];
    ["Offset of field: newtColors::shadowFg"]
        [::std::mem::offset_of!(newtColors, shadowFg) - 48usize];
    ["Offset of field: newtColors::shadowBg"]
        [::std::mem::offset_of!(newtColors, shadowBg) - 56usize];
    ["Offset of field: newtColors::titleFg"][::std::mem::offset_of!(newtColors, titleFg) - 64usize];
    ["Offset of field: newtColors::titleBg"][::std::mem::offset_of!(newtColors, titleBg) - 72usize];
    ["Offset of field: newtColors::buttonFg"]
        [::std::mem::offset_of!(newtColors, buttonFg) - 80usize];
    ["Offset of field: newtColors::buttonBg"]
        [::std::mem::offset_of!(newtColors, buttonBg) - 88usize];
    ["Offset of field: newtColors::actButtonFg"]
        [::std::mem::offset_of!(newtColors, actButtonFg) - 96usize];
    ["Offset of field: newtColors::actButtonBg"]
        [::std::mem::offset_of!(newtColors, actButtonBg) - 104usize];
    ["Offset of field: newtColors::checkboxFg"]
        [::std::mem::offset_of!(newtColors, checkboxFg) - 112usize];
    ["Offset of field: newtColors::checkboxBg"]
        [::std::mem::offset_of!(newtColors, checkboxBg) - 120usize];
    ["Offset of field: newtColors::actCheckboxFg"]
        [::std::mem::offset_of!(newtColors, actCheckboxFg) - 128usize];
    ["Offset of field: newtColors::actCheckboxBg"]
        [::std::mem::offset_of!(newtColors, actCheckboxBg) - 136usize];
    ["Offset of field: newtColors::entryFg"]
        [::std::mem::offset_of!(newtColors, entryFg) - 144usize];
    ["Offset of field: newtColors::entryBg"]
        [::std::mem::offset_of!(newtColors, entryBg) - 152usize];
    ["Offset of field: newtColors::labelFg"]
        [::std::mem::offset_of!(newtColors, labelFg) - 160usize];
    ["Offset of field: newtColors::labelBg"]
        [::std::mem::offset_of!(newtColors, labelBg) - 168usize];
    ["Offset of field: newtColors::listboxFg"]
        [::std::mem::offset_of!(newtColors, listboxFg) - 176usize];
    ["Offset of field: newtColors::listboxBg"]
        [::std::mem::offset_of!(newtColors, listboxBg) - 184usize];
    ["Offset of field: newtColors::actListboxFg"]
        [::std::mem::offset_of!(newtColors, actListboxFg) - 192usize];
    ["Offset of field: newtColors::actListboxBg"]
        [::std::mem::offset_of!(newtColors, actListboxBg) - 200usize];
    ["Offset of field: newtColors::textboxFg"]
        [::std::mem::offset_of!(newtColors, textboxFg) - 208usize];
    ["Offset of field: newtColors::textboxBg"]
        [::std::mem::offset_of!(newtColors, textboxBg) - 216usize];
    ["Offset of field: newtColors::actTextboxFg"]
        [::std::mem::offset_of!(newtColors, actTextboxFg) - 224usize];
    ["Offset of field: newtColors::actTextboxBg"]
        [::std::mem::offset_of!(newtColors, actTextboxBg) - 232usize];
    ["Offset of field: newtColors::helpLineFg"]
        [::std::mem::offset_of!(newtColors, helpLineFg) - 240usize];
    ["Offset of field: newtColors::helpLineBg"]
        [::std::mem::offset_of!(newtColors, helpLineBg) - 248usize];
    ["Offset of field: newtColors::rootTextFg"]
        [::std::mem::offset_of!(newtColors, rootTextFg) - 256usize];
    ["Offset of field: newtColors::rootTextBg"]
        [::std::mem::offset_of!(newtColors, rootTextBg) - 264usize];
    ["Offset of field: newtColors::emptyScale"]
        [::std::mem::offset_of!(newtColors, emptyScale) - 272usize];
    ["Offset of field: newtColors::fullScale"]
        [::std::mem::offset_of!(newtColors, fullScale) - 280usize];
    ["Offset of field: newtColors::disabledEntryFg"]
        [::std::mem::offset_of!(newtColors, disabledEntryFg) - 288usize];
    ["Offset of field: newtColors::disabledEntryBg"]
        [::std::mem::offset_of!(newtColors, disabledEntryBg) - 296usize];
    ["Offset of field: newtColors::compactButtonFg"]
        [::std::mem::offset_of!(newtColors, compactButtonFg) - 304usize];
    ["Offset of field: newtColors::compactButtonBg"]
        [::std::mem::offset_of!(newtColors, compactButtonBg) - 312usize];
    ["Offset of field: newtColors::actSelListboxFg"]
        [::std::mem::offset_of!(newtColors, actSelListboxFg) - 320usize];
    ["Offset of field: newtColors::actSelListboxBg"]
        [::std::mem::offset_of!(newtColors, actSelListboxBg) - 328usize];
    ["Offset of field: newtColors::selListboxFg"]
        [::std::mem::offset_of!(newtColors, selListboxFg) - 336usize];
    ["Offset of field: newtColors::selListboxBg"]
        [::std::mem::offset_of!(newtColors, selListboxBg) - 344usize];
};
pub const newtFlagsSense_NEWT_FLAGS_SET: newtFlagsSense = 0;
pub const newtFlagsSense_NEWT_FLAGS_RESET: newtFlagsSense = 1;
pub const newtFlagsSense_NEWT_FLAGS_TOGGLE: newtFlagsSense = 2;
pub type newtFlagsSense = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtComponent_struct {
    _unused: [u8; 0],
}
pub type newtComponent = *mut newtComponent_struct;
extern "C" {
    pub static newtDefaultColorPalette: newtColors;
}
pub type newtCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: newtComponent, arg2: *mut ::std::os::raw::c_void),
>;
pub type newtSuspendCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn newtInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtFinished() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCls();
}
extern "C" {
    pub fn newtResizeScreen(redraw: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtWaitForKey();
}
extern "C" {
    pub fn newtClearKeyBuffer();
}
extern "C" {
    pub fn newtDelay(usecs: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn newtOpenWindow(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCenteredWindow(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtPopWindow();
}
extern "C" {
    pub fn newtPopWindowNoRefresh();
}
extern "C" {
    pub fn newtSetColors(colors: newtColors);
}
extern "C" {
    pub fn newtSetColor(
        colorset: ::std::os::raw::c_int,
        fg: *mut ::std::os::raw::c_char,
        bg: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtRefresh();
}
extern "C" {
    pub fn newtSuspend();
}
extern "C" {
    pub fn newtSetSuspendCallback(cb: newtSuspendCallback, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtSetHelpCallback(cb: newtCallback);
}
extern "C" {
    pub fn newtResume() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtPushHelpLine(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtRedrawHelpLine();
}
extern "C" {
    pub fn newtPopHelpLine();
}
extern "C" {
    pub fn newtDrawRootText(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtBell();
}
extern "C" {
    pub fn newtCursorOff();
}
extern "C" {
    pub fn newtCursorOn();
}
extern "C" {
    pub fn newtCompactButton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtButton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        defValue: ::std::os::raw::c_char,
        seq: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxGetValue(co: newtComponent) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtCheckboxSetValue(co: newtComponent, value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtCheckboxSetFlags(
        co: newtComponent,
        flags: ::std::os::raw::c_int,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtRadiobutton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        isDefault: ::std::os::raw::c_int,
        prevButton: newtComponent,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtRadioGetCurrent(setMember: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtRadioSetCurrent(setMember: newtComponent);
}
extern "C" {
    pub fn newtGetScreenSize(cols: *mut ::std::os::raw::c_int, rows: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtLabel(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtLabelSetText(co: newtComponent, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtLabelSetColors(co: newtComponent, colorset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtVerticalScrollbar(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        normalColorset: ::std::os::raw::c_int,
        thumbColorset: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtScrollbarSet(
        co: newtComponent,
        where_: ::std::os::raw::c_int,
        total: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtScrollbarSetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        thumb: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtListbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtListboxGetCurrent(co: newtComponent) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtListboxSetCurrent(co: newtComponent, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtListboxSetCurrentByKey(co: newtComponent, key: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtListboxSetEntry(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtListboxSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtListboxSetData(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtListboxAppendEntry(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxInsertEntry(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxDeleteEntry(
        co: newtComponent,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxClear(co: newtComponent);
}
extern "C" {
    pub fn newtListboxGetEntry(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        text: *mut *mut ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtListboxGetSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtListboxClearSelection(co: newtComponent);
}
extern "C" {
    pub fn newtListboxSelectItem(
        co: newtComponent,
        key: *const ::std::os::raw::c_void,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtListboxItemCount(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTree(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxTreeMulti(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        seq: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxTreeGetSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
    ) -> *mut *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeGetCurrent(co: newtComponent) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeSetCurrent(co: newtComponent, item: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtCheckboxTreeGetMultiSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
        seqnum: ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeAddItem(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeAddArray(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
        indexes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeFindItem(
        co: newtComponent,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeSetEntry(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtCheckboxTreeSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtCheckboxTreeGetEntryValue(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtCheckboxTreeSetEntryValue(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtTextboxReflowed(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *mut ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtTextbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtTextboxSetText(co: newtComponent, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtTextboxSetHeight(co: newtComponent, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtTextboxGetNumLines(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtTextboxSetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        active: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtReflowText(
        text: *mut ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        actualWidth: *mut ::std::os::raw::c_int,
        actualHeight: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct newtExitStruct {
    pub reason: newtExitStruct__bindgen_ty_1,
    pub u: newtExitStruct__bindgen_ty_2,
}
pub const newtExitStruct_NEWT_EXIT_HOTKEY: ::std::os::raw::c_uint = 0;
pub const newtExitStruct_NEWT_EXIT_COMPONENT: ::std::os::raw::c_uint = 1;
pub const newtExitStruct_NEWT_EXIT_FDREADY: ::std::os::raw::c_uint = 2;
pub const newtExitStruct_NEWT_EXIT_TIMER: ::std::os::raw::c_uint = 3;
pub const newtExitStruct_NEWT_EXIT_ERROR: ::std::os::raw::c_uint = 4;
pub type newtExitStruct__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union newtExitStruct__bindgen_ty_2 {
    pub watch: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub co: newtComponent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "arm", target_arch = "riscv32", target_arch = "x86"))]
const _: () = {
    ["Size of newtExitStruct__bindgen_ty_2"]
        [::std::mem::size_of::<newtExitStruct__bindgen_ty_2>() - 4usize];
    ["Alignment of newtExitStruct__bindgen_ty_2"]
        [::std::mem::align_of::<newtExitStruct__bindgen_ty_2>() - 4usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::watch"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, watch) - 0usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::key"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, key) - 0usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::co"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, co) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "arm", target_arch = "riscv32", target_arch = "x86"))]
const _: () = {
    ["Size of newtExitStruct"][::std::mem::size_of::<newtExitStruct>() - 8usize];
    ["Alignment of newtExitStruct"][::std::mem::align_of::<newtExitStruct>() - 4usize];
    ["Offset of field: newtExitStruct::reason"]
        [::std::mem::offset_of!(newtExitStruct, reason) - 0usize];
    ["Offset of field: newtExitStruct::u"][::std::mem::offset_of!(newtExitStruct, u) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "aarch64", target_arch = "riscv64", target_arch = "x86_64"))]
const _: () = {
    ["Size of newtExitStruct__bindgen_ty_2"]
        [::std::mem::size_of::<newtExitStruct__bindgen_ty_2>() - 8usize];
    ["Alignment of newtExitStruct__bindgen_ty_2"]
        [::std::mem::align_of::<newtExitStruct__bindgen_ty_2>() - 8usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::watch"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, watch) - 0usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::key"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, key) - 0usize];
    ["Offset of field: newtExitStruct__bindgen_ty_2::co"]
        [::std::mem::offset_of!(newtExitStruct__bindgen_ty_2, co) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "aarch64", target_arch = "riscv64", target_arch = "x86_64"))]
const _: () = {
    ["Size of newtExitStruct"][::std::mem::size_of::<newtExitStruct>() - 16usize];
    ["Alignment of newtExitStruct"][::std::mem::align_of::<newtExitStruct>() - 8usize];
    ["Offset of field: newtExitStruct::reason"]
        [::std::mem::offset_of!(newtExitStruct, reason) - 0usize];
    ["Offset of field: newtExitStruct::u"][::std::mem::offset_of!(newtExitStruct, u) - 8usize];
};
extern "C" {
    pub fn newtForm(
        vertBar: newtComponent,
        helpTag: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtFormSetTimer(form: newtComponent, millisecs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormWatchFd(
        form: newtComponent,
        fd: ::std::os::raw::c_int,
        fdFlags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtFormSetSize(co: newtComponent);
}
extern "C" {
    pub fn newtFormGetCurrent(co: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtFormSetBackground(co: newtComponent, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormSetCurrent(co: newtComponent, subco: newtComponent);
}
extern "C" {
    pub fn newtFormAddComponent(form: newtComponent, co: newtComponent);
}
extern "C" {
    pub fn newtFormAddComponents(form: newtComponent, ...);
}
extern "C" {
    pub fn newtFormSetHeight(co: newtComponent, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtRunForm(form: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtFormRun(co: newtComponent, es: *mut newtExitStruct);
}
extern "C" {
    pub fn newtDrawForm(form: newtComponent);
}
extern "C" {
    pub fn newtFormAddHotKey(co: newtComponent, key: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormGetScrollPosition(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtFormSetScrollPosition(co: newtComponent, position: ::std::os::raw::c_int);
}
pub type newtEntryFilter = ::std::option::Option<
    unsafe extern "C" fn(
        entry: newtComponent,
        data: *mut ::std::os::raw::c_void,
        ch: ::std::os::raw::c_int,
        cursor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn newtEntry(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        initialValue: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        resultPtr: *mut *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtEntrySet(
        co: newtComponent,
        value: *const ::std::os::raw::c_char,
        cursorAtEnd: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtEntrySetFilter(
        co: newtComponent,
        filter: newtEntryFilter,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtEntryGetValue(co: newtComponent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtEntrySetFlags(
        co: newtComponent,
        flags: ::std::os::raw::c_int,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtEntrySetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        disabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtEntryGetCursorPosition(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtEntrySetCursorPosition(co: newtComponent, position: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtScale(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        fullValue: ::std::os::raw::c_longlong,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtScaleSet(co: newtComponent, amount: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn newtScaleSetColors(
        co: newtComponent,
        empty: ::std::os::raw::c_int,
        full: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentAddCallback(
        co: newtComponent,
        f: newtCallback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtComponentTakesFocus(co: newtComponent, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtComponentGetPosition(
        co: newtComponent,
        left: *mut ::std::os::raw::c_int,
        top: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentGetSize(
        co: newtComponent,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentAddDestroyCallback(
        co: newtComponent,
        f: newtCallback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtFormDestroy(form: newtComponent);
}
extern "C" {
    pub fn newtComponentDestroy(co: newtComponent);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grid_s {
    _unused: [u8; 0],
}
pub type newtGrid = *mut grid_s;
pub const newtGridElement_NEWT_GRID_EMPTY: newtGridElement = 0;
pub const newtGridElement_NEWT_GRID_COMPONENT: newtGridElement = 1;
pub const newtGridElement_NEWT_GRID_SUBGRID: newtGridElement = 2;
pub type newtGridElement = ::std::os::raw::c_uint;
extern "C" {
    pub fn newtCreateGrid(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int) -> newtGrid;
}
extern "C" {
    pub fn newtGridVStacked(
        type_: newtGridElement,
        what: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridVCloseStacked(
        type_: newtGridElement,
        what: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridHStacked(
        type1: newtGridElement,
        what1: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridHCloseStacked(
        type1: newtGridElement,
        what1: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridBasicWindow(
        text: newtComponent,
        middle: newtGrid,
        buttons: newtGrid,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridSimpleWindow(
        text: newtComponent,
        middle: newtComponent,
        buttons: newtGrid,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridSetField(
        grid: newtGrid,
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        type_: newtGridElement,
        val: *mut ::std::os::raw::c_void,
        padLeft: ::std::os::raw::c_int,
        padTop: ::std::os::raw::c_int,
        padRight: ::std::os::raw::c_int,
        padBottom: ::std::os::raw::c_int,
        anchor: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridPlace(grid: newtGrid, left: ::std::os::raw::c_int, top: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtGridFree(grid: newtGrid, recurse: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtGridGetSize(
        grid: newtGrid,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridWrappedWindow(grid: newtGrid, title: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtGridWrappedWindowAt(
        grid: newtGrid,
        title: *mut ::std::os::raw::c_char,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridAddComponentsToForm(
        grid: newtGrid,
        form: newtComponent,
        recurse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtButtonBarv(
        button1: *mut ::std::os::raw::c_char,
        b1comp: *mut newtComponent,
        args: va_list,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtButtonBar(
        button1: *mut ::std::os::raw::c_char,
        b1comp: *mut newtComponent,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtWinMessage(
        title: *mut ::std::os::raw::c_char,
        buttonText: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn newtWinMessagev(
        title: *mut ::std::os::raw::c_char,
        buttonText: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        argv: va_list,
    );
}
extern "C" {
    pub fn newtWinChoice(
        title: *mut ::std::os::raw::c_char,
        button1: *mut ::std::os::raw::c_char,
        button2: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtWinTernary(
        title: *mut ::std::os::raw::c_char,
        button1: *mut ::std::os::raw::c_char,
        button2: *mut ::std::os::raw::c_char,
        button3: *mut ::std::os::raw::c_char,
        message: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtWinMenu(
        title: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        suggestedWidth: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        maxListHeight: ::std::os::raw::c_int,
        items: *mut *mut ::std::os::raw::c_char,
        listItem: *mut ::std::os::raw::c_int,
        button1: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtWinEntry {
    pub text: *mut ::std::os::raw::c_char,
    pub value: *mut *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "arm", target_arch = "riscv32", target_arch = "x86"))]
const _: () = {
    ["Size of newtWinEntry"][::std::mem::size_of::<newtWinEntry>() - 12usize];
    ["Alignment of newtWinEntry"][::std::mem::align_of::<newtWinEntry>() - 4usize];
    ["Offset of field: newtWinEntry::text"][::std::mem::offset_of!(newtWinEntry, text) - 0usize];
    ["Offset of field: newtWinEntry::value"][::std::mem::offset_of!(newtWinEntry, value) - 4usize];
    ["Offset of field: newtWinEntry::flags"][::std::mem::offset_of!(newtWinEntry, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(any(target_arch = "aarch64", target_arch = "riscv64", target_arch = "x86_64"))]
const _: () = {
    ["Size of newtWinEntry"][::std::mem::size_of::<newtWinEntry>() - 24usize];
    ["Alignment of newtWinEntry"][::std::mem::align_of::<newtWinEntry>() - 8usize];
    ["Offset of field: newtWinEntry::text"][::std::mem::offset_of!(newtWinEntry, text) - 0usize];
    ["Offset of field: newtWinEntry::value"][::std::mem::offset_of!(newtWinEntry, value) - 8usize];
    ["Offset of field: newtWinEntry::flags"][::std::mem::offset_of!(newtWinEntry, flags) - 16usize];
};
extern "C" {
    pub fn newtWinEntries(
        title: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        suggestedWidth: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        dataWidth: ::std::os::raw::c_int,
        items: *mut newtWinEntry,
        button1: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[cfg(target_arch = "aarch64")]
pub type __builtin_va_list = __BindgenOpaqueArray<u64, 4usize>;
#[repr(C)]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[cfg(target_arch = "aarch64")]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
#[cfg(target_arch = "aarch64")]
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[cfg(target_arch = "arm")]
pub type __builtin_va_list = u32;
#[cfg(any(target_arch = "riscv32", target_arch = "riscv64"))]
pub type __builtin_va_list = *mut ::std::os::raw::c_void;
#[cfg(target_arch = "x86")]
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[cfg(target_arch = "x86_64")]
pub type __builtin_va_list = *mut __va_list_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[cfg(target_arch = "x86_64")]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
#[cfg(target_arch = "x86_64")]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
